// Generated by gencpp from file siam_main/FlightPlan.msg
// DO NOT EDIT!


#ifndef SIAM_MAIN_MESSAGE_FLIGHTPLAN_H
#define SIAM_MAIN_MESSAGE_FLIGHTPLAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace siam_main
{
template <class ContainerAllocator>
struct FlightPlan_
{
  typedef FlightPlan_<ContainerAllocator> Type;

  FlightPlan_()
    : flightPlanId(0)
    , status(0)
    , priority(0)
    , operatorId(0)
    , droneId(0)
    , orig()
    , dest()
    , dtto(0)
    , route()  {
    }
  FlightPlan_(const ContainerAllocator& _alloc)
    : flightPlanId(0)
    , status(0)
    , priority(0)
    , operatorId(0)
    , droneId(0)
    , orig(_alloc)
    , dest(_alloc)
    , dtto(0)
    , route(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _flightPlanId_type;
  _flightPlanId_type flightPlanId;

   typedef uint8_t _status_type;
  _status_type status;

   typedef int8_t _priority_type;
  _priority_type priority;

   typedef uint16_t _operatorId_type;
  _operatorId_type operatorId;

   typedef uint16_t _droneId_type;
  _droneId_type droneId;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _orig_type;
  _orig_type orig;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _dest_type;
  _dest_type dest;

   typedef uint32_t _dtto_type;
  _dtto_type dtto;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _route_type;
  _route_type route;





  typedef boost::shared_ptr< ::siam_main::FlightPlan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::siam_main::FlightPlan_<ContainerAllocator> const> ConstPtr;

}; // struct FlightPlan_

typedef ::siam_main::FlightPlan_<std::allocator<void> > FlightPlan;

typedef boost::shared_ptr< ::siam_main::FlightPlan > FlightPlanPtr;
typedef boost::shared_ptr< ::siam_main::FlightPlan const> FlightPlanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::siam_main::FlightPlan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::siam_main::FlightPlan_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::siam_main::FlightPlan_<ContainerAllocator1> & lhs, const ::siam_main::FlightPlan_<ContainerAllocator2> & rhs)
{
  return lhs.flightPlanId == rhs.flightPlanId &&
    lhs.status == rhs.status &&
    lhs.priority == rhs.priority &&
    lhs.operatorId == rhs.operatorId &&
    lhs.droneId == rhs.droneId &&
    lhs.orig == rhs.orig &&
    lhs.dest == rhs.dest &&
    lhs.dtto == rhs.dtto &&
    lhs.route == rhs.route;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::siam_main::FlightPlan_<ContainerAllocator1> & lhs, const ::siam_main::FlightPlan_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace siam_main

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::siam_main::FlightPlan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::siam_main::FlightPlan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::siam_main::FlightPlan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::siam_main::FlightPlan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::siam_main::FlightPlan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::siam_main::FlightPlan_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::siam_main::FlightPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30f199e7cf367208ba384eb9bfe052f5";
  }

  static const char* value(const ::siam_main::FlightPlan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30f199e7cf367208ULL;
  static const uint64_t static_value2 = 0xba384eb9bfe052f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::siam_main::FlightPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "siam_main/FlightPlan";
  }

  static const char* value(const ::siam_main::FlightPlan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::siam_main::FlightPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 flightPlanId\n"
"uint8 status\n"
"int8 priority\n"
"\n"
"uint16 operatorId\n"
"uint16 droneId\n"
"\n"
"geometry_msgs/Point orig\n"
"geometry_msgs/Point dest\n"
"uint32 dtto\n"
"\n"
"geometry_msgs/Point[] route\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::siam_main::FlightPlan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::siam_main::FlightPlan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flightPlanId);
      stream.next(m.status);
      stream.next(m.priority);
      stream.next(m.operatorId);
      stream.next(m.droneId);
      stream.next(m.orig);
      stream.next(m.dest);
      stream.next(m.dtto);
      stream.next(m.route);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FlightPlan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::siam_main::FlightPlan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::siam_main::FlightPlan_<ContainerAllocator>& v)
  {
    s << indent << "flightPlanId: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.flightPlanId);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "priority: ";
    Printer<int8_t>::stream(s, indent + "  ", v.priority);
    s << indent << "operatorId: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.operatorId);
    s << indent << "droneId: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.droneId);
    s << indent << "orig: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.orig);
    s << indent << "dest: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.dest);
    s << indent << "dtto: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dtto);
    s << indent << "route[]" << std::endl;
    for (size_t i = 0; i < v.route.size(); ++i)
    {
      s << indent << "  route[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.route[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIAM_MAIN_MESSAGE_FLIGHTPLAN_H
